---
title: "Lab 5: Murder in SQL City"
author: "Christopher Hawkins"
format: html
editor: source
embed-resources: true
code-tools: true
echo: true
code-fold: true
---

For this lab, you will be joining and filtering related datasets to solve a murder mystery!

## Instructions

Northwestern University's Knight Lab wanted to help sharpen users' database skills, so they created a murder mystery. Can you solve this crime in SQL City??

The relational data you will be working with contains tables with different pieces of information pertinent to the crime - people, social media check-ins, driver's licenses, crime scene reports, police interviews, and more!

![Database schema](https://mystery.knightlab.com/schema.png)

Solve the murder mystery, showing **all of your work in this document**. Your document and code must be well organized, easy to follow, and reproducible.

+ Use headers and written descriptions to indicate what you are doing.
+ Use `dplyr` verbs and `join` functions rather than just looking through the tables manually.
+ Use good code formatting practices.
+ Comment your code.
+ Cite any external sources you use to solve the mystery.

### Tips 

You may find the `pull()` function handy for displaying each clue as you go along.


## Access the Data

This code chunk will read in all of the tables of data for you. Don't modify or remove this!

```{r}
#| message: false
#| warning: false
#| label: read-in-data

library(tidyverse)

# If purrr is not detected, install the package
if (!"purrr" %in% installed.packages()) install.packages("purrr")

source("https://raw.githubusercontent.com/atheobold/groupworthy-data-science/main/labs/instructions/lab-5-setup.R")
```

## Solve the Crime

### Crime Scene Report

Detective Wickham reaches out to you...

> A crime has taken place and I need your help! There was a murder in SQL City sometime on January 15, 2018. Could you retrieve the crime scene report from the police departmentâ€™s database and follow the clues to find the person responsible for the murder?!

*I made a revision to this code. I added the mutate line. I realized that I could parse the date column into a date variable to make it easier to read. I also added to the filter an element tbhsat the type is murder to further filter the data. This is important because I don't want readers to get confused when reading data.*
```{r}
#| label: inspecting-crime-scene-report

# filter all the reports that are in SQL City and on 2018-01-15
crime_scene_report |>
  mutate(date = ymd(date)) |>
  filter(city == "SQL City",
         date == ymd("20180115"),
         type == "murder")

```

*Revision, I added section headers to make the code easier to read and more tidy.*

### Check the person dataset based on the clue to get the witnesses

Clue 2: The first witness lives at the last house on "Northwestern Dr". The second witness, named Annabel, lives somewhere on "Franklin Ave".

*revision. I changed how a filtetred the data to look at both suspects in the same pipeline. I also used slice_max to look at the top results. This makes my code more efficent since I can do everthing in one pipeline.*
```{r}
#| label: street-names

# filter the person dataset for street name address is either Northwestern Dr or Franklin Ave
witnesses <- person |>
  filter(
    address_street_name %in% c("Northwestern Dr", "Franklin Ave") & 
    (address_street_name == "Northwestern Dr" | str_detect(name, "^Annabel\\b"))
  ) |>
  group_by(address_street_name) |>
  slice_max(address_number, n = 1) |>
  ungroup()

```

### Check the interviews of the witness interviews

Clue 3: Witness is  Morty Schapiro (14887) and Annabel Miller (16371)

*revision, I condensed both interview into one pipeline and joined the two ids together so they dont have to be hard coded. This makes my code more efficient since there is only one pipeline and the ids are not hard coded.*
```{r}
#| label: interviews

# look though the interviews
witness_interviews <- witnesses |>
  inner_join(interview, by = c("id" = "person_id"))
```

### Identify the suspect

Clue 4: The membership number on the bag started with "48Z". Only gold members have those bags. The man got into a car with a plate that included "H42W"... when I was working out last week on January the 9th.

*Revision, I combined the subsequent functions into one pipeline per feedback. This makes the code more efficient and easier to follow instead of have separate code chucks to do so.*
```{r}
#| label: gym-id

suspect <- get_fit_now_member |>
  filter(str_detect(id, "^48Z"), membership_status == "gold") |>
  mutate(id = as.character(id)) |>
  inner_join(get_fit_now_check_in, by = c("id" = "membership_id")) |>
  filter(check_in_date == "20180109") |>
  inner_join(person, by = c("person_id" = "id")) |>
  inner_join(drivers_license, by = c("license_id" = "id")) |>
  filter(str_detect(plate_number, "H42W"))

print(suspect)

#get_fit_now_member |>
#  filter(str_detect(id, "^48Z"),
#         membership_status == "gold")
```

### Interview the suspect

either Joe Germuska (28819) or Jeremy Bowers (67318)

```{r}
#| label: license-plate

#drivers_license |>
#  inner_join(person, join_by("id" == "license_id")) |>
#  filter(str_detect(plate_number, "H42W"))
```

Jeremy Bowers (424427) is on both license plate and gym search.

### Check the gym checkin timing

*Revision, made a join to combine the interview dataset so I don't need to hard code the name. This makes the code more efficient and reproducible since the code is no longer hard coded.*
```{r}
#| label: gym-timing

# Annabel saw the murder, check if Jeremy was at the gym same time
#get_fit_now_check_in |>
#  filter(check_in_date == "20180109",
#         membership_id == "48Z55")

# Yes Jeremy was at gym same time, look into his interview
interview_suspect <- suspect |>
  inner_join(interview, by = c("person_id")) |>
  filter(person_id == "67318")
print(interview_suspect)
```

### Look at the final suspect

Clue 5: I was hired by a woman with a lot of money. I don't know her name but I know she's around 5'5" (65") or 5'7" (67"). She has red hair and she drives a Tesla Model S. I know that she attended the SQL Symphony Concert 3 times in December 2017.

```{r}
person |>
  inner_join(drivers_license,
             join_by("license_id" == "id")) |>
  inner_join(facebook_event_checkin,
             join_by("id" == "person_id")) |>
  filter(gender == "female",
         hair_color == "red",
         car_make == "Tesla",
         car_model == "Model S",
         event_name == "SQL Symphony Concert")
```

Miranda Priestly occurs 3 times

**Follow the evidence to the person responsible for the murder, building a report as you go.**
Hint: Make sure you check for interviews with any suspects!


## And the final suspect is...

*Put the name of the person responsible for the murder here:*
Miranda Priestly